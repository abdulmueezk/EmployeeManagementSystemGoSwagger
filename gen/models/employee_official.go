// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmployeeOfficial employee official
//
// swagger:model employeeOfficial
type EmployeeOfficial struct {

	// department
	// Example: GoLang
	// Required: true
	Department *string `json:"department"`

	// designation
	// Example: BackEnd Developer
	// Required: true
	Designation *string `json:"designation"`

	// health insurance
	// Example: true
	// Required: true
	HealthInsurance *bool `json:"health_insurance"`

	// job type
	// Example: Intern
	// Required: true
	JobType *string `json:"job_type"`

	// life insurance
	// Example: true
	// Required: true
	LifeInsurance *bool `json:"life_insurance"`

	// salary
	// Example: 20000
	// Required: true
	Salary *int64 `json:"salary"`

	// team lead
	// Example: Kashif Ali
	// Required: true
	TeamLead *string `json:"team_lead"`

	// user id
	// Example: 31202
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this employee official
func (m *EmployeeOfficial) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesignation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthInsurance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifeInsurance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamLead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmployeeOfficial) validateDepartment(formats strfmt.Registry) error {

	if err := validate.Required("department", "body", m.Department); err != nil {
		return err
	}

	return nil
}

func (m *EmployeeOfficial) validateDesignation(formats strfmt.Registry) error {

	if err := validate.Required("designation", "body", m.Designation); err != nil {
		return err
	}

	return nil
}

func (m *EmployeeOfficial) validateHealthInsurance(formats strfmt.Registry) error {

	if err := validate.Required("health_insurance", "body", m.HealthInsurance); err != nil {
		return err
	}

	return nil
}

func (m *EmployeeOfficial) validateJobType(formats strfmt.Registry) error {

	if err := validate.Required("job_type", "body", m.JobType); err != nil {
		return err
	}

	return nil
}

func (m *EmployeeOfficial) validateLifeInsurance(formats strfmt.Registry) error {

	if err := validate.Required("life_insurance", "body", m.LifeInsurance); err != nil {
		return err
	}

	return nil
}

func (m *EmployeeOfficial) validateSalary(formats strfmt.Registry) error {

	if err := validate.Required("salary", "body", m.Salary); err != nil {
		return err
	}

	return nil
}

func (m *EmployeeOfficial) validateTeamLead(formats strfmt.Registry) error {

	if err := validate.Required("team_lead", "body", m.TeamLead); err != nil {
		return err
	}

	return nil
}

func (m *EmployeeOfficial) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this employee official based on context it is used
func (m *EmployeeOfficial) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EmployeeOfficial) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmployeeOfficial) UnmarshalBinary(b []byte) error {
	var res EmployeeOfficial
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
