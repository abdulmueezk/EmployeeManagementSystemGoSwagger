// Code generated by go-swagger; DO NOT EDIT.

package team_lead

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ShowEmployeeTeamHandlerFunc turns a function with the right signature into a show employee team handler
type ShowEmployeeTeamHandlerFunc func(ShowEmployeeTeamParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShowEmployeeTeamHandlerFunc) Handle(params ShowEmployeeTeamParams) middleware.Responder {
	return fn(params)
}

// ShowEmployeeTeamHandler interface for that can handle valid show employee team params
type ShowEmployeeTeamHandler interface {
	Handle(ShowEmployeeTeamParams) middleware.Responder
}

// NewShowEmployeeTeam creates a new http.Handler for the show employee team operation
func NewShowEmployeeTeam(ctx *middleware.Context, handler ShowEmployeeTeamHandler) *ShowEmployeeTeam {
	return &ShowEmployeeTeam{Context: ctx, Handler: handler}
}

/* ShowEmployeeTeam swagger:route GET /teamLead/showteam/{user_id} teamLead showEmployeeTeam

Show Employee recoard

*/
type ShowEmployeeTeam struct {
	Context *middleware.Context
	Handler ShowEmployeeTeamHandler
}

func (o *ShowEmployeeTeam) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewShowEmployeeTeamParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
